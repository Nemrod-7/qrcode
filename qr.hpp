#include <string>

std::string alnum = "|123456789ABCDEFGHIJKLMNOPQRSTUVWXYZ $%*+-./:";
enum ECC {H,Q,M,L};
// enum Mtype{MODE, MODSIZE};
enum MODE {END,NUMERIC,ALPHANUM,STRUCTURED,BYTE,FNC1,_6_,ECI, KANJI};
// const int Mdb[4][2] = {{1, 4},{2, 6},{4, 8},{8, 16}};

//           0 -> 1              1 -> 2                    2 -> 4                         3 -> 8
// END,     NUMERIC,            ALPHANUM,   STRUCTURED,     BYTE,      FNC1,_6_,ECI,       KANJI
//        H   Q   M   L         H   Q   M   L           H   Q   M   L                  H   Q   M   L
const int capacity[23][9][4] = {
{{},{   0,   0,   0,   0},{   0,   0,   0,   0},{},{   0,   0,   0,   0},{},{},{},{   0,   0,   0,   0}},
{{},{  17,  27,  34,  41},{  10,  16,  20,  25},{},{   7,  11,  14,  17},{},{},{},{   4,   7,   8,  10}},
{{},{  34,  48,  63,  77},{  20,  29,  38,  47},{},{  14,  20,  26,  32},{},{},{},{   8,  12,  16,  20}},
{{},{  58,  77, 101, 127},{  35,  47,  61,  77},{},{  24,  32,  42,  53},{},{},{},{  15,  20,  26,  32}},
{{},{  82, 111, 149, 187},{  50,  67,  90, 114},{},{  34,  46,  62,  78},{},{},{},{  21,  28,  38,  48}},
{{},{ 106, 144, 202, 255},{  64,  87, 122, 154},{},{  44,  60,  84, 106},{},{},{},{  27,  37,  52,  65}},
{{},{ 139, 178, 255, 322},{  84, 108, 154, 195},{},{  58,  74, 106, 134},{},{},{},{  36,  45,  65,  82}},
{{},{ 154, 207, 293, 370},{  93, 125, 178, 224},{},{  64,  86, 122, 154},{},{},{},{  39,  53,  75,  95}},
{{},{ 202, 259, 365, 461},{ 122, 157, 221, 279},{},{  84, 108, 152, 192},{},{},{},{  52,  66,  93, 118}},
{{},{ 235, 312, 432, 552},{ 143, 189, 262, 335},{},{  98, 130, 180, 230},{},{},{},{  60,  80, 111, 141}},
{{},{ 288, 364, 513, 652},{ 174, 221, 311, 395},{},{ 119, 151, 213, 271},{},{},{},{  74,  93, 131, 167}},
{{},{ 331, 427, 604, 772},{ 200, 259, 366, 468},{},{ 137, 177, 251, 321},{},{},{},{  85, 109, 155, 198}},
{{},{ 374, 489, 691, 883},{ 227, 296, 419, 535},{},{ 155, 203, 287, 367},{},{},{},{  96, 125, 177, 226}},
{{},{ 427, 580, 796,1022},{ 259, 352, 483, 619},{},{ 177, 241, 331, 425},{},{},{},{ 109, 149, 204, 262}},
{{},{ 468, 621, 871,1101},{ 283, 376, 528, 667},{},{ 194, 258, 362, 458},{},{},{},{ 120, 159, 223, 282}},
{{},{ 530, 703, 991,1250},{ 321, 426, 600, 758},{},{ 220, 292, 412, 520},{},{},{},{ 136, 180, 254, 320}},
{{},{ 602, 775,1082,1408},{ 365, 470, 656, 854},{},{ 250, 322, 450, 586},{},{},{},{ 154, 198, 277, 361}},
{{},{ 674, 876,1212,1548},{ 408, 531, 734, 938},{},{ 280, 364, 504, 644},{},{},{},{ 173, 224, 310, 397}},
{{},{ 746, 948,1346,1725},{ 452, 574, 816,1046},{},{ 310, 394, 560, 718},{},{},{},{ 191, 243, 345, 442}},
{{},{ 813,1063,1500,1903},{ 493, 644, 909,1153},{},{ 338, 442, 624, 792},{},{},{},{ 208, 272, 384, 488}},
{{},{ 919,1159,1600,2061},{ 557, 702, 970,1249},{},{ 382, 482, 666, 858},{},{},{},{ 235, 297, 410, 528}},
{{},{ 969,1224,1708,2232},{ 587, 742,1035,1352},{},{ 403, 509, 711, 929},{},{},{},{ 248, 314, 438, 572}},
{{},{1056,1358,1872,2409},{ 640, 823,1134,1460},{},{ 439, 565, 779,1003},{},{},{},{ 270, 348, 480, 618}}};


const int err_blocks [4][41] = {
    //  Version: (note that index 0 is for padding, and is set to an illegal value)
    //  1, 2, 3, 4, 5, 6, 7, 8, 9,10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40    Error correction level
    {0, 1, 1, 2, 4, 4, 4, 5, 6, 8, 8, 11, 11, 16, 16, 18, 16, 19, 21, 25, 25, 25, 34, 30, 32, 35, 37, 40, 42, 45, 48, 51, 54, 57, 60, 63, 66, 70, 74, 77, 81},  // High
    {0, 1, 1, 2, 2, 4, 4, 6, 6, 8, 8,  8, 10, 12, 16, 12, 17, 16, 18, 21, 20, 23, 23, 25, 27, 29, 34, 34, 35, 38, 40, 43, 45, 48, 51, 53, 56, 59, 62, 65, 68},  // Quartile
    {0, 1, 1, 1, 2, 2, 4, 4, 4, 5, 5,  5,  8,  9,  9, 10, 10, 11, 13, 14, 16, 17, 17, 18, 20, 21, 23, 25, 26, 28, 29, 31, 33, 35, 37, 38, 40, 43, 45, 47, 49},  // Medium
    {0, 1, 1, 1, 1, 1, 2, 2, 2, 2, 4,  4,  4,  4,  4,  6,  6,  6,  6,  7,  8,  8,  9,  9, 10, 12, 12, 12, 13, 14, 15, 16, 17, 18, 19, 19, 20, 21, 22, 24, 25},  // Low
};

const int eccinfo[4][17] = {
  {0b1010001001,0b1110111110,0b0011100111,0b0111010000,0b1101100010,0b1001010101,0b0100001100,0b0000111011},
  {0b0101011111,0b0001101000,0b1100110001,0b1000000110,0b0010110100,0b0110000011,0b1011011010,0b1111101101},
  {0b0000010010,0b0100100101,0b1001111100,0b1101001011,0b0111111001,0b0011001110,0b1110010111,0b1010100000},
  {0b1111000100,0b1011110011,0b0110101010,0b0010011101,0b1000101111,0b1100011000,0b0001000001,0b0101110110},
};

// number of data codeblocks
//   H,   Q,   M,   L},
unsigned ndblocks[41][4] = { {   0,   0,   0,   0},
{   9,  13,  16,  19}, {  16,  22,  28,  34}, {  26,  34,  44,  55}, {  36,  48,  64,  80}, {  46,  62,  86, 108},
{  60,  76, 108, 136}, {  66,  88, 124, 156}, {  86, 110, 154, 194}, { 100, 132, 182, 232}, { 122, 154, 216, 274},
{ 140, 180, 254, 324}, { 158, 206, 290, 370}, { 180, 244, 334, 428}, { 197, 261, 365, 461}, { 223, 295, 415, 523},
{ 253, 325, 453, 589}, { 283, 367, 507, 647}, { 313, 397, 563, 721}, { 341, 445, 627, 795}, { 385, 485, 669, 861},
{ 406, 512, 714, 932}, { 442, 568, 782,1006}, { 464, 614, 860,1094}, { 514, 664, 914,1174}, { 538, 718,1000,1276},
{ 596, 754,1062,1370}, { 628, 808,1128,1468}, { 661, 871,1193,1531}, { 701, 911,1267,1631}, { 745, 985,1373,1735},
{ 793,1033,1455,1843}, { 845,1115,1541,1955}, { 901,1171,1631,2071}, { 961,1231,1725,2191}, { 986,1286,1812,2306},
{1054,1354,1914,2434}, {1096,1426,1992,2566}, {1142,1502,2102,2702}, {1222,1582,2216,2812}, {1276,1666,2334,2956}};

// number of ecc codeblocks
//   H,   Q,   M,   L},
unsigned neblocks[41][4] = { {   0,   0,   0,   0},
{  17,  13,  10,   7}, {  28,  22,  16,  10}, {  22,  18,  26,  15}, {  16,  26,  18,  20}, {  22,  18,  24,  26},
{  28,  24,  16,  18}, {  26,  18,  18,  20}, {  26,  22,  22,  24}, {  24,  20,  22,  30}, {  28,  24,  26,  18},
{  24,  28,  30,  20}, {  28,  26,  22,  24}, {  22,  24,  22,  26}, {  24,  20,  24,  30}, {  24,  30,  24,  22},
{  30,  24,  28,  24}, {  28,  28,  28,  28}, {  28,  28,  26,  30}, {  26,  26,  26,  28}, {  28,  30,  26,  28},
{  30,  28,  26,  28}, {  24,  30,  28,  28}, {  30,  30,  28,  30}, {  30,  30,  28,  30}, {  30,  30,  28,  26},
{  30,  28,  28,  28}, {  30,  30,  28,  30}, {  30,  30,  28,  30}, {  30,  30,  28,  30}, {  30,  30,  28,  30},
{  30,  30,  28,  30}, {  30,  30,  28,  30}, {  30,  30,  28,  30}, {  30,  30,  28,  30}, {  30,  30,  28,  30},
{  30,  30,  28,  30}, {  30,  30,  28,  30}, {  30,  30,  28,  30}, {  30,  30,  28,  30}, {  30,  30,  28,  30}};


// the number of bits necessary to record the size of the txt
// depends of the version and the mode :
//    N   AN    B        K
const int length_bits[3][9] = {
    {0,10, 9,0, 8,0,0,0, 8}, // version  1- 9
    {0,12,11,0,16,0,0,0,10}, // version 10-26
    {0,14,13,0,16,0,0,0,12}  // version 27-40
};


class Infos {
    public :
        static std::string ECC (int level) {
            switch(level) {
                case L : return "L"; break;
                case M : return "M"; break;
                case Q : return "Q"; break;
                case H : return "H"; break;
                default : return ""; break;
            }
        }
        static std::string mode (int level) {
            switch(level) {
                case BYTE : return "BYTE"; break;
                case KANJI : return "KANJI"; break;
                case NUMERIC : return "NUMERIC"; break;
                case ALPHANUM : return "ALPHANUM"; break;
                default : return ""; break;
            }
        }

        static void grid (std::vector<std::vector<int>> &grid) {
            std::cout << "\n";
            for (int i = 0; i < grid.size(); i++) {
                for (int j = 0; j < grid.size(); j++) {
                    int bit = grid[i][j];
                    if (bit == 0) {
                        std::cout << '.' << ' ';
                    } else {
                        std::cout << '#' << ' ';
                    }
                }
                std::cout << '\n';
            }
        }
        static void show (int ecc, int mode, int version) {
          std::cout << "\n";
          // std::cout << "codewords : " << ((capacity[version][mode][ecc] + 4) - msg.size()) << "\n";
          std::cout << "Ecc : " << Infos::ECC(ecc) << "\n";
          std::cout << "Mode : " << Infos::mode(mode) << "\n";
          std::cout << "Version : " << version << "\n";
          std::cout << "Capacity : " << capacity[version][mode][ecc] << "\n";
          // std::cout << "data codewords : " << dc << " " << "error codewords : " << ec << "\n";
        }
};
